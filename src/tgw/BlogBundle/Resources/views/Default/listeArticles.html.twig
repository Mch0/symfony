{%  extends "tgwBlogBundle::header.html.twig" %}


{% block content %}
    <div class="col-lg-10">
<div class="row">
    <div id="main">
    <ol id="filters">
        {% for categorie in categories %}
        <li data-filter="{{ categorie.getTitre }}">{{ categorie.getTitre }}</li>
        {% endfor %}
    </ol>
        <ul id="tiles">
            <div id="loader">
                <div id="loaderCircle"></div>
            </div>
            {% for article in articles %}

                <li data-filter-class='["{{ article.getArticleCategorie.getTitre }}"]'>
                    <a href="{{ path('blog_article_show', { 'id': article.getId }) }}">
                        Â {% if article.getArticleVignette() == null %}
                    <img height="210" width="295" src="{{ asset('bundles/tgw/image/imgnewbase.png') }}" />
                    {% else %}
                        <img  height="210" width="295" src="{{ asset(article.getArticleVignette) }}" />
                        {% endif %}
                        <p>{{ article.getArticleTitre }} </p>
                    </a>

                </li>

            {%  endfor %}

                <!-- End of grid blocks -->
        </ul>

    <ul>

    </ul>
    </div>
</div>
    </div>
    <script src="{{ asset('bundles/tgw/js/jquery.wookmark.js') }}"></script>
    <!-- Once the page is loaded, initalize the plug-in. -->
    <script type="text/javascript">
        $(document).ready(new function() {
            // Prepare layout options.
            var options = {
                autoResize: true, // This will auto-update the layout when the browser window is resized.
                container: $('#content'), // Optional, used for some extra CSS styling
                offset: 5, // Optional, the distance between grid items
                itemWidth: 320, // Optional, the width of a grid item
                autoResize:true,
                ignoreInactiveItems : true

            };

            // Get a reference to your grid items.
            var handler = $('#tiles li'),
                    filters = $('#filters li');

            // Call the layout function.
            handler.wookmark(options);

            /**
             * When a filter is clicked, toggle it's active state and refresh.
             */
            var onClickFilter = function(event) {
                var item = $(event.currentTarget),
                        activeFilters = [];
                item.toggleClass('active');

                // Collect active filter strings
                filters.filter('.active').each(function() {
                    activeFilters.push($(this).text());

                });

                handler.wookmarkInstance.filter(activeFilters, 'or');
                var taille = document.getElementById('content').offsetHeight;
                taille = taille + 100 ;
                document.getElementById('content').height
                console.log(taille);
                $('#content').css('height',taille+"px");
            }

            // Capture filter click events.
            filters.click(onClickFilter);

            var taille = document.getElementById('content').offsetHeight;
            taille = taille + 100;
            document.getElementById('content').height
            console.log(taille);

            $('#content').css('height',taille+"px");
        });

        /*
         var handler = null;

         var isLoading = false;
         //var apiURL = 'http://www.wookmark.com/api/json/popular'

         // Prepare layout options.
         var options = {
         autoResize: true, // This will auto-update the layout when the browser window is resized.
         container: $('#tiles'), // Optional, used for some extra CSS styling
         offset: 2, // Optional, the distance between grid items
         itemWidth: 210 // Optional, the width of a grid item
         };

         /**
         * When scrolled all the way to the bottom, add more tiles.
         */
        /*  function onScroll(event) {
         // Only check when we're not still waiting for data.
         if(!isLoading) {
         // Check if we're within 100 pixels of the bottom edge of the broser window.
         var closeToBottom = ($(window).scrollTop() + $(window).height() > $(document).height() - 100);
         if(closeToBottom) {
         loadData();
         }
         }
         };

         /**
         * Refreshes the layout.
         */
        /*    function applyLayout() {
         // Create a new layout handler.
         handler = $('#tiles li');
         handler.wookmark(options);
         };

         /**
         * Loads data from the API.
         */
        /*    function loadData() {
         isLoading = true;
         $('#loaderCircle').show();

         $.ajax({
         //url: apiURL,
         dataType: 'jsonp',
         data: {page: page}, // Page parameter to make sure we load new data
         success: onLoadData
         });
         };

         /**
         * Receives data from the API, creates HTML for images and updates the layout
         */
        /*    function onLoadData(data) {
         isLoading = false;
         $('#loaderCircle').hide();

         // Increment page index for future calls.
         page++;

         // Create HTML for the images.
         var html = '';
         var i=0, length=data.length, image;
         for(; i<length; i++) {
         image = data[i];
         html += '<li>';

         // Image tag (preview in Wookmark are 200px wide, so we calculate the height based on that).
         html += '<img src="'+image.preview+'" width="200" height="'+Math.round(image.height/image.width*200)+'">';

         // Image title.
         html += '<p>'+image.title+'</p>';

         html += '</li>';
         }

         // Add image HTML to the page.
         $('#tiles').append(html);

         // Apply layout.
         applyLayout();
         };

         $(document).ready(new function() {
         // Capture scroll event.
         $(document).bind('scroll', onScroll);

         // Load first data from the API.
         loadData();
         });
         */


    </script>
{% endblock %}
